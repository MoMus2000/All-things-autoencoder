# -*- coding: utf-8 -*-
"""Autoencoder.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jaY5jvPlMoWUh_XXZl4cXi9tf6IW6mM4
"""

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense,Flatten,Reshape
from tensorflow.keras.optimizers import SGD
from tensorflow.keras.datasets import mnist
import numpy as np
import matplotlib.pyplot as plt

(X_train,y_train),(X_test,y_test) = mnist.load_data()
X_train = X_train /255.0
X_test = X_test /255.0

x = np.ndarray.flatten(X_train)
print(x.shape)
# Means 60k*28*2860

encoder = Sequential()
encoder.add(Flatten(input_shape = [28,28]))
encoder.add(Dense(500, activation='relu'))
encoder.add(Dense(400, activation='relu'))
encoder.add(Dense(300, activation='relu'))
encoder.add(Dense(200, activation='relu'))
encoder.add(Dense(100, activation='relu'))
encoder.add(Dense(50, activation='relu'))
encoder.add(Dense(25, activation='relu'))



decoder = Sequential()
decoder.add(Dense(50, input_shape = [25],activation='relu'))
decoder.add(Dense(100, activation='relu'))
decoder.add(Dense(200, activation='relu'))
decoder.add(Dense(300, activation='relu'))
decoder.add(Dense(400, activation='relu'))
decoder.add(Dense(784, activation='sigmoid'))
decoder.add(Reshape([28,28]))

auto_encoder = Sequential([encoder,decoder])
auto_encoder.compile(loss='binary_crossentropy',optimizer=SGD(lr=1.5))

auto_encoder.fit(X_train,X_train,epochs=15,validation_data=(X_test,X_test))

passed_images = auto_encoder.predict(X_test[:10])
n=0
plt.imshow(X_test[n])
plt.show()
plt.imshow(passed_images[n])
plt.show()

encoder.summary()

from tensorflow.keras import Model
layer_name = 'dense_19'
intermediate_layer_model = Model(inputs=encoder.input,outputs=encoder.get_layer(layer_name).output)

intermediate_output = intermediate_layer_model.predict(X_test)

intermediate_output.shape

!pip install bokeh

import bokeh.plotting as bp
from bokeh.models import HoverTool, BoxSelectTool
from bokeh.plotting import figure, show, output_notebook

from sklearn.manifold import TSNE
tsne_model = TSNE(n_components=2, verbose=1, random_state=0)
tsne_img_label = tsne_model.fit_transform(intermediate_output)

import pandas as pd
import numpy as np
tsne_df = pd.DataFrame(tsne_img_label, columns=['x', 'y'])
tsne_df['image_label'] = y_test

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
# %matplotlib inline
plt.figure(figsize=(12,4))
plt.subplot(1,2,1)
cmap = plt.cm.get_cmap('jet')
plt.scatter(tsne_df['x'], tsne_df['y'], 
            alpha=0.5, c=y_test, cmap=cmap, s=10)
plt.colorbar()

